import fmlbuild.JmhTask

plugins {
    id 'net.neoforged.jarcompatibilitychecker' version '0.1.13'
}

apply plugin : fmlbuild.JmhPlugin

checkJarCompatibility {
    isAPI = true
}

sourceSets {
    jmh
    testJars

    // Additional test JARs, to be loaded via SecureJar.from(...)
    testjar1
    testjar2
    // Test classpath code, to make sure that ModuleClassLoader is properly isolated from the classpath
    testjar_cp
    test {
        runtimeClasspath += sourceSets.testjar_cp.output
    }
}

configurations {
    localRuntime {
        canBeResolved = false
        canBeConsumed = false
    }
    runtimeClasspath.extendsFrom(localRuntime)
}

abstract class WriteVirtualJarManifestTask extends DefaultTask {
    // String-based to avoid Gradle trying to fingerprint these
    @Input
    abstract MapProperty<String, List<String>> getVirtualJars()

    @OutputFile
    abstract RegularFileProperty getOutputFile()

    @TaskAction
    def write() {
        var p = new Properties()

        for (var entry in getVirtualJars().get().entrySet()) {
            p.setProperty(entry.key, String.join(File.pathSeparator, entry.value))
        }

        getOutputFile().get().asFile.withWriter("utf-8") { writer ->
            p.store(writer, "")
        }
    }
}

tasks.register("createVirtualJarManifest", WriteVirtualJarManifestTask.class) {
    it.group = "build"
    it.outputFile.set(project.layout.buildDirectory.file("virtualJarManifest.properties"))
    it.virtualJars.put(
            "main",
            sourceSets.main.output.elements.map { it.collect { loc -> loc.asFile.absolutePath.replace('\\', '/') } }
    )
}

dependencies {
    compileOnly("org.jetbrains:annotations:${jetbrains_annotations_version}")

    api("org.ow2.asm:asm:${asm_version}")
    api("org.ow2.asm:asm-tree:${asm_version}")
    api("org.ow2.asm:asm-commons:${asm_version}")
    api("net.neoforged:mergetool:${mergetool_version}:api")
    api("org.apache.logging.log4j:log4j-api:${log4j_version}")
    api("org.slf4j:slf4j-api:${slf4j_api_version}")
    api("com.google.guava:guava:${guava_version}")
    api("com.google.code.gson:gson:${gson_version}")
    api("org.apache.maven:maven-artifact:${apache_maven_artifact_version}")
    api("org.apache.commons:commons-lang3:${apache_commons_lang3_version}")
    api("com.electronwill.night-config:core:${nightconfig_version}")
    api("com.electronwill.night-config:toml:${nightconfig_version}")
    api("net.neoforged:coremods:${coremods_version}") {
        exclude module: 'modlauncher'
    }
    api("com.mojang:logging:${mojang_logging_version}")
    api "net.neoforged:JarJarSelector:${jarjar_version}"
    api "net.neoforged:JarJarMetadata:${jarjar_version}"
    api("net.neoforged:bus:${eventbus_version}")
    implementation("net.neoforged:JarJarFileSystems:$jarjar_version")

    implementation("net.sf.jopt-simple:jopt-simple:${jopt_simple_version}")
    implementation("net.neoforged:accesstransformers:${accesstransformers_version}")
    implementation("net.neoforged.accesstransformers:at-modlauncher:${accesstransformers_version}") {
        exclude module: 'modlauncher'
    }
    implementation("net.fabricmc:sponge-mixin:${mixin_version}")
    implementation("net.minecrell:terminalconsoleappender:${terminalconsoleappender_version}")
    implementation("commons-io:commons-io:${commons_io_version}")

    // This is for fatal startup error reporting only
    compileOnly(platform("org.lwjgl:lwjgl-bom:3.3.3"))
    compileOnly("org.lwjgl:lwjgl-tinyfd")

    implementation("org.apache.logging.log4j:log4j-core:${log4j_version}")
    annotationProcessor("org.apache.logging.log4j:log4j-core:${log4j_version}")

    testCompileOnly("org.jetbrains:annotations:${jetbrains_annotations_version}")
    testRuntimeOnly("cpw.mods:bootstraplauncher:${bootstraplauncher_version}")
    testRuntimeOnly("org.apache.logging.log4j:log4j-core:$log4j_version")
    testImplementation(platform("org.junit:junit-bom:$jupiter_version"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation("org.mockito:mockito-junit-jupiter:$mockito_version")
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
    testImplementation(platform("org.assertj:assertj-bom:$assertj_version"))
    testImplementation("org.assertj:assertj-core")
    testImplementation("org.junit.jupiter:junit-jupiter-engine")
    testImplementation('com.google.jimfs:jimfs:1.3.0')
    testCompileOnly(sourceSets.testJars.output)

    jmhImplementation(sourceSets.main.output)
    jmhImplementation(sourceSets.testJars.output)
    jmhImplementation("org.openjdk.jmh:jmh-core:${jmh_version}")
    jmhAnnotationProcessor("org.openjdk.jmh:jmh-generator-annprocess:${jmh_version}")
    testImplementation('net.bytebuddy:byte-buddy-agent:1.14.12')
    // For Testing purposes only
    localRuntime('net.bytebuddy:byte-buddy-agent:1.14.12')

    // Provides the JUnit project as a BOM entry
    constraints {
        api(project(':junit'))
    }
}

configurations.jmhImplementation.extendsFrom(configurations.implementation)

var testJars = tasks.register(sourceSets.testJars.jarTaskName, Jar) {
    archiveClassifier = 'testsjar'
    from sourceSets.testJars.output
}

test {
    inputs.file(testJars.flatMap(AbstractArchiveTask::getArchiveFile))

    useJUnitPlatform()

    systemProperty 'testJars.location', testJars.map(tj -> tj.archiveFile.get().asFile).get()
    dependsOn tasks.compileTestjar1Java
    dependsOn tasks.processTestjar1Resources
    dependsOn tasks.compileTestjar2Java
    dependsOn tasks.processTestjar2Resources
    environment "sjh.testjar1", sourceSets.testjar1.output.classesDirs.asPath + File.pathSeparator + sourceSets.testjar1.output.resourcesDir.absolutePath
    environment "sjh.testjar2", sourceSets.testjar2.output.classesDirs.asPath + File.pathSeparator + sourceSets.testjar2.output.resourcesDir.absolutePath

    jvmArgs(
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED',
            '-javaagent:' + file('devagent.jar').absolutePath
    )
}

final jmh = tasks.register('jmh') {
    group = "benchmark"
}
for (var benchmark in [
        "jarmodulefinder": "cpw.mods.cl.benchmarks.JarModuleFinder",
        "unionfs": "cpw.mods.cl.benchmarks.UnionFileSystemBenchmark",
        "transformer": "cpw.mods.modlauncher.benchmarks.TransformBenchmark"
]) {
    final benchmarkId = benchmark.key
    final benchmarkClass = benchmark.value

    final benchmarkTask = tasks.register('jmh' + benchmarkId, JmhTask) {
        group = "benchmark"
        dependsOn('jmhClasses')
        classpath.from(sourceSets.jmh.runtimeClasspath)
        mainClass = 'org.openjdk.jmh.Main'
        jvmArgs('--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED')

        final results = file("${project.reportsDir}/jmh/${benchmarkId}.json")
        doFirst {
            results.parentFile.mkdirs()
        }

        args = [
                benchmarkClass,
                '-bm', 'avgt',
                '-prof', 'stack',
                '-prof', 'jfr:dir=' + file("${project.reportsDir}/jmh/").absolutePath,
                '-r', '3s',
                '-w', '3s',
                '-wi', '3',
                '-i', '3',
                '-f', '3',
                '-tu', 'us',
                '-rf', 'json',
                '-rff', results
        ]
        javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    }
    jmh.configure { dependsOn benchmarkTask }
}

spotless {
    java {
        // courtesy of diffplug/spotless#240
        // https://github.com/diffplug/spotless/issues/240#issuecomment-385206606
        custom 'noWildcardImports', { String fileContents ->
            if (fileContents.contains('*;\n')) {
                throw new GradleException('No wildcard imports are allowed!')
            }
        }

        custom 'noNotNull', { String fileContents ->
            if (fileContents.contains('@NotNull') || fileContents.contains('@Nonnull')) {
                throw new GradleException('@NotNull and @Nonnull are disallowed.')
            }
        }
        bumpThisNumberIfACustomStepChanges(1)
    }
}
